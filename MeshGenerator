using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MeshGenerator : MonoBehaviour {

	public SquareGrid squareGrid;

	public void GenerateMesh(int[,] map, int squareSize)
	{
		squareGrid = new SquareGrid(map, squareSize);
	}

	void OnDrawGizmos()
	{
		if (squareGrid != null) {
			for(int x = 0; x < squareGrid.squares.GetLength(0); x++) {
				for (int y = 0; y < squareGrid.squares.GetLength(1); y++) {
					
					Gizmos.color = squareGrid.squares [x, y].bottomLeft.active ? Color.black : Color.white;
					Gizmos.DrawCube (squareGrid.squares [x, y].bottomLeft.pos, Vector3.one * .4f);

					Gizmos.color = squareGrid.squares [x, y].topLeft.active ? Color.black : Color.white;
					Gizmos.DrawCube (squareGrid.squares [x, y].topLeft.pos, Vector3.one * .4f);

					Gizmos.color = squareGrid.squares [x, y].topRight.active ? Color.black : Color.white;
					Gizmos.DrawCube (squareGrid.squares [x, y].topRight.pos, Vector3.one * .4f);

					Gizmos.color = squareGrid.squares [x, y].bottomRight.active ? Color.black : Color.white;
					Gizmos.DrawCube (squareGrid.squares [x, y].bottomRight.pos, Vector3.one * .4f);

					Gizmos.color = Color.gray;
					Gizmos.DrawCube (squareGrid.squares [x, y].centerBottom.pos, Vector3.one * .15f);
					Gizmos.DrawCube (squareGrid.squares [x, y].centerTop.pos, Vector3.one * .15f);
					Gizmos.DrawCube (squareGrid.squares [x, y].centerRight.pos, Vector3.one * .15f);
					Gizmos.DrawCube (squareGrid.squares [x, y].centerLeft.pos, Vector3.one * .15f);
					 
				}
			}
		}
	}

	public class SquareGrid
	{
		public Square[,] squares;


		public SquareGrid(int[,] map, int squareSize)
		{
			int nodeCountX = map.GetLength(0);
			int nodeCountY = map.GetLength(1);

			float meshWidth = nodeCountX*squareSize;
			float meshHeight = nodeCountY*squareSize;

			ControlNode[,] controlNodes = new ControlNode[nodeCountX, nodeCountY];

			for(int x = 0; x < nodeCountX; x++) {
				for(int y = 0; y < nodeCountY; y++) {
					Vector3 pos = new Vector3(-meshWidth/2 + x*squareSize + squareSize/2, 0, -meshHeight/2 + y*squareSize + squareSize/2);
					controlNodes[x, y] = new ControlNode(pos, map[x,y] == 1, squareSize);
				}
			}

			squares = new Square[nodeCountX - 1, nodeCountY - 1];

			for(int x = 0; x < nodeCountX -1; x++) {
				for(int y = 0; y < nodeCountY - 1; y++) {
					squares[x, y] = new Square(controlNodes[x, y+1], controlNodes[x+1, y+1], controlNodes[x, y],  controlNodes[x+1,y]);
				}
			}
		}
	}

	public class Square
	{
		public ControlNode topLeft, topRight, bottomLeft, bottomRight;
		public Node centerTop, centerLeft, centerBottom, centerRight;
		public int configuration;

		public Square(ControlNode _topLeft, ControlNode _topRight, ControlNode _bottomLeft, ControlNode _bottomRight) 
		{
			topLeft = _topLeft;
			topRight = _topRight;
			bottomLeft = _bottomLeft;
			bottomRight = _bottomRight;

			centerTop = topLeft.right;
			centerLeft = bottomLeft.above;
			centerBottom = bottomLeft.right;
			centerRight = bottomRight.above;
		}
	}

	public class Node
	{
		public Vector3 pos;
		public int index = -1;

		public Node(Vector3 _pos)
		{
			pos = _pos;
		}
	}

	public class ControlNode : Node
	{
		public bool active;
		public Node above, right;

		public ControlNode(Vector3 _pos, bool _active, float squareSize) : base(_pos)
		{
			active = _active;

			above = new Node(pos + Vector3.forward*squareSize/2f);
			right = new Node(pos + Vector3.right*squareSize/2f);
		}
	}
}
